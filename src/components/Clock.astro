
<div id="clock" class="progress-clock">
    <button class="time-date" data-group="d" type="button">
      <small data-unit="w">Sunday</small><br>
      <span data-unit="mo">January</span>
      <span data-unit="d">1</span>
    </button>
    <button class="time-digit" data-unit="h" data-group="h" type="button">12</button>
    <span class="time-colon">:</span>
    <button class="time-digit" data-unit="m" data-group="m" type="button">00</button>
    <span class="time-colon">:</span>
    <button class="time-digit" data-unit="s" data-group="s" type="button">00</button>
    <span class="time-ampm" data-unit="ap">AM</span>
    <svg class="rings" width="256" height="256" viewBox="0 0 256 256">
      <defs>
        <linearGradient id="pc-red" x1="1" y1="0.5" x2="0" y2="0.5">
          <stop offset="0%" stop-color="hsl(343,90%,55%)" />
          <stop offset="100%" stop-color="hsl(323,90%,55%)" />
        </linearGradient>
        <linearGradient id="pc-yellow" x1="1" y1="0.5" x2="0" y2="0.5">
          <stop offset="0%" stop-color="hsl(43,90%,55%)" />
          <stop offset="100%" stop-color="hsl(23,90%,55%)" />
        </linearGradient>
        <linearGradient id="pc-blue" x1="1" y1="0.5" x2="0" y2="0.5">
          <stop offset="0%" stop-color="hsl(223,90%,55%)" />
          <stop offset="100%" stop-color="hsl(203,90%,55%)" />
        </linearGradient>
        <linearGradient id="pc-purple" x1="1" y1="0.5" x2="0" y2="0.5">
          <stop offset="0%" stop-color="hsl(283,90%,55%)" />
          <stop offset="100%" stop-color="hsl(263,90%,55%)" />
        </linearGradient>
      </defs>
  
      <g data-units="d">
        <circle class="ring" cx="128" cy="128" r="74" fill="none" opacity="0.1" stroke="url(#pc-red)" stroke-width="12" />
        <circle class="ring-fill" data-ring="mo" cx="128" cy="128" r="74" fill="none" stroke="url(#pc-red)" stroke-width="12" stroke-dasharray="465 465" stroke-dashoffset="465" stroke-linecap="round" transform="rotate(-90,128,128)" />
      </g>
  
      <g data-units="h">
        <circle class="ring" cx="128" cy="128" r="90" fill="none" opacity="0.1" stroke="url(#pc-yellow)" stroke-width="12" />
        <circle class="ring-fill" data-ring="d" cx="128" cy="128" r="90" fill="none" stroke="url(#pc-yellow)" stroke-width="12" stroke-dasharray="565.5 565.5" stroke-dashoffset="565.5" stroke-linecap="round" transform="rotate(-90,128,128)" />
      </g>
  
      <g data-units="m">
        <circle class="ring" cx="128" cy="128" r="106" fill="none" opacity="0.1" stroke="url(#pc-blue)" stroke-width="12" />
        <circle class="ring-fill" data-ring="h" cx="128" cy="128" r="106" fill="none" stroke="url(#pc-blue)" stroke-width="12" stroke-dasharray="666 666" stroke-dashoffset="666" stroke-linecap="round" transform="rotate(-90,128,128)" />
      </g>
  
      <g data-units="s">
        <circle class="ring" cx="128" cy="128" r="122" fill="none" opacity="0.1" stroke="url(#pc-purple)" stroke-width="12" />
        <circle class="ring-fill" data-ring="m" cx="128" cy="128" r="122" fill="none" stroke="url(#pc-purple)" stroke-width="12" stroke-dasharray="766.5 766.5" stroke-dashoffset="766.5" stroke-linecap="round" transform="rotate(-90,128,128)" />
      </g>
    </svg>
  </div>

<style>
    .progress-clock {
        display: grid;
        justify-content: center;
        align-content: center;
        position: fixed;
        text-align: center;
        width: 10em;
        height: 10em;
        background: #fff;
        border-radius: 50%;
        z-index: 9;
        right: 15px;
        bottom: 10px;
    }

.time-date,
.time-digit,
.time-colon,
.time-ampm {
  transition: color 0.2s linear;
  user-select: none;
  border: none;
}

.time-date,
.time-digit {
  background: transparent;
}

.time-date,
.time-ampm {
  grid-column: 1 / 6;
}

.time-date {
  font-size: 0.75em;
  line-height: 1.33;
}

.time-digit,
.time-colon {
  font-size: 14px;
  font-weight: 400;
  grid-row: 2;
}

.time-colon {
  line-height: 1.275;
}

.time-ampm {
  cursor: default;
  grid-row: 3;
}

.rings {
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: -1;
}

.ring {
  opacity: 0.1;
}

.ring-fill {
  transition:
    opacity 0s 0.3s linear,
    stroke-dashoffset 0.3s ease-in-out;
}

.ring-fill--360 {
  opacity: 0;
  stroke-dashoffset: 0;
  transition-duration: 0.3s;
}

[data-group]:focus {
  outline: transparent;
}

[data-units] {
  transition: opacity 0.2s linear;
}

[data-group="d"]:hover {
  color: hsl(333, 90%, 55%);
}

[data-group="h"]:hover {
  color: hsl(33, 90%, 55%);
}

[data-group="m"]:hover {
  color: hsl(213, 90%, 55%);
}

[data-group="s"]:hover {
  color: hsl(273, 90%, 55%);
}

[data-group]:hover~.rings [data-units] {
  opacity: 0.2;
}

[data-group="d"]:hover~.rings [data-units="d"],
[data-group="h"]:hover~.rings [data-units="h"],
[data-group="m"]:hover~.rings [data-units="m"],
[data-group="s"]:hover~.rings [data-units="s"] {
  opacity: 1;
}
</style>
<script type="module" >

    document.addEventListener('astro:page-load', () => {
        const clock = new ProgressClock("#clock");
        // Make the DIV element draggable:
        dragElement(document.getElementById("clock"));

        function dragElement(elmnt) {
            var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
            if (document.getElementById(elmnt.id + "header")) {
                // if present, the header is where you move the DIV from:
                document.getElementById(elmnt.id + "header").onmousedown = dragMouseDown;
            } else {
                // otherwise, move the DIV from anywhere inside the DIV:
                elmnt.onmousedown = dragMouseDown;
            }

            function dragMouseDown(e) {
                e = e || window.event;
                e.preventDefault();
                // get the mouse cursor position at startup:
                pos3 = e.clientX;
                pos4 = e.clientY;
                document.onmouseup = closeDragElement;
                // call a function whenever the cursor moves:
                document.onmousemove = elementDrag;
            }

            function elementDrag(e) {
                e = e || window.event;
                e.preventDefault();
                // calculate the new cursor position:
                pos1 = pos3 - e.clientX;
                pos2 = pos4 - e.clientY;
                pos3 = e.clientX;
                pos4 = e.clientY;
                // set the element's new position:
                elmnt.style.top = (elmnt.offsetTop - pos2) + "px";
                elmnt.style.left = (elmnt.offsetLeft - pos1) + "px";
            }

            function closeDragElement() {
                // stop moving when mouse button is released:
                document.onmouseup = null;
                document.onmousemove = null;
            }
        }
    });

    class ProgressClock {
        constructor(qs) {
            this.el = document.querySelector(qs);
            this.time = 0;
            this.updateTimeout = null;
            this.ringTimeouts = [];
            this.update();
        }
        getDayOfWeek(day) {
            switch (day) {
            case 1:
                return "Monday";
            case 2:
                return "Tuesday";
            case 3:
                return "Wednesday";
            case 4:
                return "Thursday";
            case 5:
                return "Friday";
            case 6:
                return "Saturday";
            default:
                return "Sunday";
            }
        }
        getMonthInfo(mo,yr) {
            switch (mo) {
            case 1:
                return { name: "February", days: yr % 4 === 0 ? 29 : 28 };
            case 2:
                return { name: "March", days: 31 };
            case 3:
                return { name: "April", days: 30 };
            case 4:
                return { name: "May", days: 31 };
            case 5:
                return { name: "June", days: 30 };
            case 6:
                return { name: "July", days: 31 };
            case 7:
                return { name: "August", days: 31 };
            case 8:
                return { name: "September", days: 30 };
            case 9:
                return { name: "October", days: 31 };
            case 10:
                return { name: "November", days: 30 };
            case 11:
                return { name: "December", days: 31 };
            default:
                return { name: "January", days: 31 };
            }
        }
        update() {
            this.time = new Date();

            if (this.el) {
            // date and time
            const dayOfWeek = this.time.getDay();
            const year = this.time.getFullYear();
            const month = this.time.getMonth();
            const day = this.time.getDate();
            const hr = this.time.getHours();
            const min = this.time.getMinutes();
            const sec = this.time.getSeconds();
            const dayOfWeekName = this.getDayOfWeek(dayOfWeek);
            const monthInfo = this.getMonthInfo(month,year);
            const m_progress = sec / 60;
            const h_progress = (min + m_progress) / 60;
            const d_progress = (hr + h_progress) / 24;
            const mo_progress = ((day - 1) + d_progress) / monthInfo.days;
            const units = [
                {
                label: "w",
                value: dayOfWeekName
                },
                {
                label: "mo",
                value: monthInfo.name,
                progress: mo_progress
                },
                {
                label: "d", 
                value: day,
                progress: d_progress
                },
                {
                label: "h", 
                value: hr > 12 ? hr - 12 : hr,
                progress: h_progress
                },
                {
                label: "m", 
                value: min < 10 ? "0" + min : min,
                progress: m_progress
                },
                {
                label: "s", 
                value: sec < 10 ? "0" + sec : sec
                },
                {
                label: "ap",
                value: hr > 11 ? "PM" : "AM"
                }
            ];

            // flush out the timeouts
            this.ringTimeouts.forEach(t => {
                clearTimeout(t);
            });
            this.ringTimeouts = [];

            // update the display
            units.forEach(u => {
                // rings
                const ring = this.el.querySelector(`[data-ring="${u.label}"]`);

                if (ring) {
                const strokeDashArray = ring.getAttribute("stroke-dasharray");
                const fill360 = "progress-clock__ring-fill--360";

                if (strokeDashArray) {
                    // calculate the stroke
                    const circumference = +strokeDashArray.split(" ")[0];
                    const strokeDashOffsetPct = 1 - u.progress;

                    ring.setAttribute(
                    "stroke-dashoffset",
                    strokeDashOffsetPct * circumference
                    );

                    // add the fade-out transition, then remove it
                    if (strokeDashOffsetPct === 1) {
                    ring.classList.add(fill360);

                    this.ringTimeouts.push(
                        setTimeout(() => {
                        ring.classList.remove(fill360);
                        }, 600)
                    );
                    }
                }
                }

                // digits
                const unit = this.el.querySelector(`[data-unit="${u.label}"]`);

                if (unit)
                unit.innerText = u.value;
            });
            }

            clearTimeout(this.updateTimeout);
            this.updateTimeout = setTimeout(this.update.bind(this),1e3);
        }
    }
    
</script>