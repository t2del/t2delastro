---
import { Icon } from 'astro-icon'
const { navData, rightMenu } = Astro.props;
import Container from '../components/Container.astro';

export async function fetchData() {
    try {
      const response = await fetch('https://t2del-astro.instawp.xyz/wp-json/custom/v1/menu-header/');
      if (response.ok) {
        const data = await response.json();
        // Now you can work with the 'data'
        return data;
      } else {
        // Handle the case where the response is not OK (e.g., not found, unauthorized, etc.)
        return { error: 'Error: Unable to fetch data' };
      }
    } catch (error) {
      // Handle any network or fetch-related errors
      return { error: 'An error occurred while fetching data: ' + error.message };
    }
  }
const fetchedData = fetchData();
const data = await fetchedData;

---
<script type="module" >
  document.addEventListener('astro:page-load', () => {
    // put all javascript here
    const bodyElement = document.querySelector('body');
    const menuButton = document.querySelector('#menuButton')
    const navHeader = document.querySelector('#t2delHeader');
    const menuButtonIconHam = document.querySelector('#menuButtonIconHam');
    const menuButtonIconClose = document.querySelector('#menuButtonIconClose');

    menuButton.addEventListener('click', toggleMenu);
    function toggleMenu() {
      menuButtonIconHam.toggleAttribute('hidden');
      menuButtonIconClose.toggleAttribute('hidden');
      navHeader.toggleAttribute('mobile-menu-open');
    }
    const scrollingElement = document.querySelector('header');

    window.addEventListener('scroll', () => {
      const scrollPercentage = (window.scrollY / (document.body.scrollHeight - window.innerHeight)) * 100;
      if (scrollPercentage > 1) {
        scrollingElement.classList.add("white-bg"); // White background
      } else {
        scrollingElement.classList.remove("white-bg");; // Default background
      }
    });
    const obeserver = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if(entry.isIntersecting) {
          entry.target.classList.add('show');
        } else {
          entry.target.classList.remove('show');
        }
      });
    });
    const hiddenElements = document.querySelectorAll('.notshow');
    hiddenElements.forEach((el) => obeserver.observe(el));
  }, );  
</script>  

<header id="t2delHeader" class={`${rightMenu ? "header--right" : ``.trim()}`}>
  <Container className="container-header">
  <div class="header-logo-menu__container">
  <button id="menuButton" title="Open Main Menu">
    <span id="menuButtonIconHam">
        <div class="baseline-menu"></div>
      <Icon name="ic:baseline-menu" width="24px" height="24px" />
    </span>
    <span id="menuButtonIconClose" hidden>
      <Icon name="ic:baseline-close" width="24px" height="24px" />
      <div class="baseline-close"></div>
    </span>
  </button>
  <a class="header-logo__link" href="/t2delastro/">
    <slot name="logo">
    </slot>
  </a>
  </div>
  <div class="header-nav__container">
    <slot name="nav">
      {navData && (
        <nav>
          <ul>
            {navData.map(navItem => (
              <li className={navItem.submenu ? 'has-submenu' : ''}>
                <a href={navItem.slug}>{navItem.title}</a>
                {navItem.submenu && (
                  <ul class="sub-menu ">
                    {navItem.submenu.map(submenuItem => (
                      <li>
                        <a href={submenuItem.slug}>{submenuItem.title}</a>
                      </li>
                    ))}
                  </ul>
                )}
              </li>
            ))}
            {data.length > 0 && (
              <li class="has-submenu">
                <a href="#">Wordpress</a>
                <ul class="sub-menu ">
                  {data.map(navItem => (
                  <li className={navItem.submenu ? 'has-submenu' : ''}>
                    <a href={`./${navItem.slug}`}>{navItem.title}</a>
                    {navItem.submenu && (
                      <ul class="sub-menu ">
                        {navItem.submenu.map(submenuItem => (
                          <li>                           
                            <a href={`/${submenuItem.slug}`}>{submenuItem.title}</a>
                          </li>
                        ))}
                      </ul>
                    )}
                  </li>
                ))}
                </ul>
              </li>
            )}
          </ul>
        </nav>
      )}
      
    </slot>
  </div>
  <div class="header-action-item__container hide">
    <slot name="action-item">
    </slot>
  </div>
</Container>
</header>